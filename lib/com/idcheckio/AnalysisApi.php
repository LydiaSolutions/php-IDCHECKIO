<?php
/**
 * AnalysisApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IdCheck.IO API
 *
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com.idcheckio;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AnalysisApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnalysisApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/rest');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AnalysisApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getReport
     *
     * HTTP GET report (demo)
     *
     * @param string $analysis_ref_uid Report analysisRefUid (required)
     * @param string $authorization Authorization header (required)
     * @param string $accept_language Accept language header (optional)
     * @return \Swagger\Client\Model\ReportResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getReport($analysis_ref_uid, $authorization, $accept_language = null)
    {
        list($response) = $this->getReportWithHttpInfo($analysis_ref_uid, $authorization, $accept_language);
        return $response;
    }

    /**
     * Operation getReportWithHttpInfo
     *
     * HTTP GET report (demo)
     *
     * @param string $analysis_ref_uid Report analysisRefUid (required)
     * @param string $authorization Authorization header (required)
     * @param string $accept_language Accept language header (optional)
     * @return Array of \Swagger\Client\Model\ReportResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getReportWithHttpInfo($analysis_ref_uid, $authorization, $accept_language = null)
    {
        // verify the required parameter 'analysis_ref_uid' is set
        if ($analysis_ref_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $analysis_ref_uid when calling getReport');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getReport');
        }
        // parse inputs
        $resourcePath = "/v0/pdfreport/{analysisRefUid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json; charset=utf-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($analysis_ref_uid !== null) {
            $resourcePath = str_replace(
                "{" . "analysisRefUid" . "}",
                $this->apiClient->getSerializer()->toPathValue($analysis_ref_uid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ReportResponse',
                '/v0/pdfreport/{analysisRefUid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ReportResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ReportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getResult
     *
     * HTTP GET result
     *
     * @param string $analysis_ref_uid Result analysisRefUid (required)
     * @param string $authorization Authorization header (required)
     * @param string $accept_language Accept language header (optional)
     * @param bool $recto_image_cropped True to obtain recto image cropped if applicable (optional, default to false)
     * @param bool $face_image_cropped True to obtain face image cropped if applicable (optional, default to false)
     * @param bool $signature_image_cropped True to obtain signature image cropped if applicable (optional, default to false)
     * @return \Swagger\Client\Model\ResultResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getResult($analysis_ref_uid, $authorization, $accept_language = null, $recto_image_cropped = null, $face_image_cropped = null, $signature_image_cropped = null)
    {
        list($response) = $this->getResultWithHttpInfo($analysis_ref_uid, $authorization, $accept_language, $recto_image_cropped, $face_image_cropped, $signature_image_cropped);
        return $response;
    }

    /**
     * Operation getResultWithHttpInfo
     *
     * HTTP GET result
     *
     * @param string $analysis_ref_uid Result analysisRefUid (required)
     * @param string $authorization Authorization header (required)
     * @param string $accept_language Accept language header (optional)
     * @param bool $recto_image_cropped True to obtain recto image cropped if applicable (optional, default to false)
     * @param bool $face_image_cropped True to obtain face image cropped if applicable (optional, default to false)
     * @param bool $signature_image_cropped True to obtain signature image cropped if applicable (optional, default to false)
     * @return Array of \Swagger\Client\Model\ResultResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getResultWithHttpInfo($analysis_ref_uid, $authorization, $accept_language = null, $recto_image_cropped = null, $face_image_cropped = null, $signature_image_cropped = null)
    {
        // verify the required parameter 'analysis_ref_uid' is set
        if ($analysis_ref_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $analysis_ref_uid when calling getResult');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getResult');
        }
        // parse inputs
        $resourcePath = "/v0/result/{analysisRefUid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json; charset=utf-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($recto_image_cropped !== null) {
            $queryParams['rectoImageCropped'] = $this->apiClient->getSerializer()->toQueryValue($recto_image_cropped);
        }
        // query params
        if ($face_image_cropped !== null) {
            $queryParams['faceImageCropped'] = $this->apiClient->getSerializer()->toQueryValue($face_image_cropped);
        }
        // query params
        if ($signature_image_cropped !== null) {
            $queryParams['signatureImageCropped'] = $this->apiClient->getSerializer()->toQueryValue($signature_image_cropped);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($analysis_ref_uid !== null) {
            $resourcePath = str_replace(
                "{" . "analysisRefUid" . "}",
                $this->apiClient->getSerializer()->toPathValue($analysis_ref_uid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ResultResponse',
                '/v0/result/{analysisRefUid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ResultResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResultResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTask
     *
     * HTTP GET task
     *
     * @param string $analysis_ref_uid Task analysisRefUid (required)
     * @param string $authorization Authorization header (required)
     * @param string $accept_language Accept language header (optional)
     * @param int $wait specify a maximum wait time in milliseconds (optional)
     * @return \Swagger\Client\Model\TaskResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTask($analysis_ref_uid, $authorization, $accept_language = null, $wait = null)
    {
        list($response) = $this->getTaskWithHttpInfo($analysis_ref_uid, $authorization, $accept_language, $wait);
        return $response;
    }

    /**
     * Operation getTaskWithHttpInfo
     *
     * HTTP GET task
     *
     * @param string $analysis_ref_uid Task analysisRefUid (required)
     * @param string $authorization Authorization header (required)
     * @param string $accept_language Accept language header (optional)
     * @param int $wait specify a maximum wait time in milliseconds (optional)
     * @return Array of \Swagger\Client\Model\TaskResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTaskWithHttpInfo($analysis_ref_uid, $authorization, $accept_language = null, $wait = null)
    {
        // verify the required parameter 'analysis_ref_uid' is set
        if ($analysis_ref_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $analysis_ref_uid when calling getTask');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling getTask');
        }
        // parse inputs
        $resourcePath = "/v0/task/{analysisRefUid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json; charset=utf-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($wait !== null) {
            $queryParams['wait'] = $this->apiClient->getSerializer()->toQueryValue($wait);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // path params
        if ($analysis_ref_uid !== null) {
            $resourcePath = str_replace(
                "{" . "analysisRefUid" . "}",
                $this->apiClient->getSerializer()->toPathValue($analysis_ref_uid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TaskResponse',
                '/v0/task/{analysisRefUid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TaskResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TaskResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 303:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TaskResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postImage
     *
     * HTTP POST task image
     *
     * @param \Swagger\Client\Model\ImageRequest $body2 Image request (required)
     * @param string $authorization Authorization header (required)
     * @param bool $async_mode true to activate asynchrone mode (optional)
     * @param \Swagger\Client\Model\AsynchronousResponse $body  (optional)
     * @param string $accept_language Accept language header (optional)
     * @return \Swagger\Client\Model\ResultResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postImage($body2, $authorization, $async_mode = null, $body = null, $accept_language = null)
    {
        list($response) = $this->postImageWithHttpInfo($body2, $authorization, $async_mode, $body, $accept_language);
        return $response;
    }

    /**
     * Operation postImageWithHttpInfo
     *
     * HTTP POST task image
     *
     * @param \Swagger\Client\Model\ImageRequest $body2 Image request (required)
     * @param string $authorization Authorization header (required)
     * @param bool $async_mode true to activate asynchrone mode (optional)
     * @param \Swagger\Client\Model\AsynchronousResponse $body  (optional)
     * @param string $accept_language Accept language header (optional)
     * @return Array of \Swagger\Client\Model\ResultResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postImageWithHttpInfo($body2, $authorization, $async_mode = null, $body = null, $accept_language = null)
    {
        // verify the required parameter 'body2' is set
        if ($body2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body2 when calling postImage');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling postImage');
        }
        // parse inputs
        $resourcePath = "/v0/task/image";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json; charset=utf-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($async_mode !== null) {
            $queryParams['asyncMode'] = $this->apiClient->getSerializer()->toQueryValue($async_mode);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
// body params
        $_tempBody = null;
        if (isset($body2)) {
            $_tempBody = $body2;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ResultResponse',
                '/v0/task/image'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ResultResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResultResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TaskResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postMrz
     *
     * HTTP POST task mrz
     *
     * @param \Swagger\Client\Model\MrzRequest $body2 Mrz request (required)
     * @param string $authorization Authorization header (required)
     * @param bool $async_mode true to activate asynchrone mode (optional)
     * @param \Swagger\Client\Model\AsynchronousResponse $body  (optional)
     * @param string $accept_language Accept language header (optional)
     * @return \Swagger\Client\Model\ResultResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postMrz($body2, $authorization, $async_mode = null, $body = null, $accept_language = null)
    {
        list($response) = $this->postMrzWithHttpInfo($body2, $authorization, $async_mode, $body, $accept_language);
        return $response;
    }

    /**
     * Operation postMrzWithHttpInfo
     *
     * HTTP POST task mrz
     *
     * @param \Swagger\Client\Model\MrzRequest $body2 Mrz request (required)
     * @param string $authorization Authorization header (required)
     * @param bool $async_mode true to activate asynchrone mode (optional)
     * @param \Swagger\Client\Model\AsynchronousResponse $body  (optional)
     * @param string $accept_language Accept language header (optional)
     * @return Array of \Swagger\Client\Model\ResultResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function postMrzWithHttpInfo($body2, $authorization, $async_mode = null, $body = null, $accept_language = null)
    {
        // verify the required parameter 'body2' is set
        if ($body2 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body2 when calling postMrz');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling postMrz');
        }
        // parse inputs
        $resourcePath = "/v0/task/mrz";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json; charset=utf-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($async_mode !== null) {
            $queryParams['asyncMode'] = $this->apiClient->getSerializer()->toQueryValue($async_mode);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($accept_language);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
// body params
        $_tempBody = null;
        if (isset($body2)) {
            $_tempBody = $body2;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ResultResponse',
                '/v0/task/mrz'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ResultResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResultResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TaskResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
