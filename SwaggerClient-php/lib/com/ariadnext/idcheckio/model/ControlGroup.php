<?php
/**
 * ControlGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  com.ariadnext.idcheckio.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IdCheck.IO API
 *
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com.ariadnext.idcheckio.model;

use \ArrayAccess;

/**
 * ControlGroup Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     com.ariadnext.idcheckio.invoker
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ControlGroup implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ControlGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'identifier' => 'string',
        'title_msg' => 'string',
        'result_msg' => 'string',
        'result' => 'string',
        'control' => '\com.ariadnext.idcheckio.model\Control[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'identifier' => 'identifier',
        'title_msg' => 'titleMsg',
        'result_msg' => 'resultMsg',
        'result' => 'result',
        'control' => 'control'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'identifier' => 'setIdentifier',
        'title_msg' => 'setTitleMsg',
        'result_msg' => 'setResultMsg',
        'result' => 'setResult',
        'control' => 'setControl'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'identifier' => 'getIdentifier',
        'title_msg' => 'getTitleMsg',
        'result_msg' => 'getResultMsg',
        'result' => 'getResult',
        'control' => 'getControl'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const RESULT_NONE = 'NONE';
    const RESULT_OK = 'OK';
    const RESULT_WARNING = 'WARNING';
    const RESULT_ERROR = 'ERROR';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_NONE,
            self::RESULT_OK,
            self::RESULT_WARNING,
            self::RESULT_ERROR,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['title_msg'] = isset($data['title_msg']) ? $data['title_msg'] : null;
        $this->container['result_msg'] = isset($data['result_msg']) ? $data['result_msg'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['control'] = isset($data['control']) ? $data['control'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("NONE", "OK", "WARNING", "ERROR");
        if (!in_array($this->container['result'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'result', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("NONE", "OK", "WARNING", "ERROR");
        if (!in_array($this->container['result'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets identifier
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     * @param string $identifier control group identifier
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets title_msg
     * @return string
     */
    public function getTitleMsg()
    {
        return $this->container['title_msg'];
    }

    /**
     * Sets title_msg
     * @param string $title_msg title message
     * @return $this
     */
    public function setTitleMsg($title_msg)
    {
        $this->container['title_msg'] = $title_msg;

        return $this;
    }

    /**
     * Gets result_msg
     * @return string
     */
    public function getResultMsg()
    {
        return $this->container['result_msg'];
    }

    /**
     * Sets result_msg
     * @param string $result_msg result message
     * @return $this
     */
    public function setResultMsg($result_msg)
    {
        $this->container['result_msg'] = $result_msg;

        return $this;
    }

    /**
     * Gets result
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     * @param string $result result
     * @return $this
     */
    public function setResult($result)
    {
        $allowed_values = array('NONE', 'OK', 'WARNING', 'ERROR');
        if (!in_array($result, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'result', must be one of 'NONE', 'OK', 'WARNING', 'ERROR'");
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets control
     * @return \com.ariadnext.idcheckio.model\Control[]
     */
    public function getControl()
    {
        return $this->container['control'];
    }

    /**
     * Sets control
     * @param \com.ariadnext.idcheckio.model\Control[] $control control list
     * @return $this
     */
    public function setControl($control)
    {
        $this->container['control'] = $control;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\com.ariadnext.idcheckio.invoker\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\com.ariadnext.idcheckio.invoker\ObjectSerializer::sanitizeForSerialization($this));
    }
}


