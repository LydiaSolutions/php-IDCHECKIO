<?php
/**
 * SandboxApi
 * PHP version 5
 *
 * @category Class
 * @package  com.ariadnext.idcheckio.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IdCheck.IO API
 *
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com.ariadnext.idcheckio.api;

use \com.ariadnext.idcheckio.invoker\Configuration;
use \com.ariadnext.idcheckio.invoker\ApiClient;
use \com.ariadnext.idcheckio.invoker\ApiException;
use \com.ariadnext.idcheckio.invoker\ObjectSerializer;

/**
 * SandboxApi Class Doc Comment
 *
 * @category Class
 * @package  com.ariadnext.idcheckio.invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SandboxApi
{

    /**
     * API Client
     *
     * @var \com.ariadnext.idcheckio.invoker\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \com.ariadnext.idcheckio.invoker\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\com.ariadnext.idcheckio.invoker\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/rest');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \com.ariadnext.idcheckio.invoker\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \com.ariadnext.idcheckio.invoker\ApiClient $apiClient set the API client
     *
     * @return SandboxApi
     */
    public function setApiClient(\com.ariadnext.idcheckio.invoker\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getImage
     *
     * HTTP GET image
     *
     * @param string $image_uid EnumDemoDocsImage (required)
     * @param string $raw_type Image raw type (optional)
     * @param string $face Image face (optional)
     * @param string $light Image light (optional)
     * @return string[]
     * @throws \com.ariadnext.idcheckio.invoker\ApiException on non-2xx response
     */
    public function getImage($image_uid, $raw_type = null, $face = null, $light = null)
    {
        list($response) = $this->getImageWithHttpInfo($image_uid, $raw_type, $face, $light);
        return $response;
    }

    /**
     * Operation getImageWithHttpInfo
     *
     * HTTP GET image
     *
     * @param string $image_uid EnumDemoDocsImage (required)
     * @param string $raw_type Image raw type (optional)
     * @param string $face Image face (optional)
     * @param string $light Image light (optional)
     * @return Array of string[], HTTP status code, HTTP response headers (array of strings)
     * @throws \com.ariadnext.idcheckio.invoker\ApiException on non-2xx response
     */
    public function getImageWithHttpInfo($image_uid, $raw_type = null, $face = null, $light = null)
    {
        // verify the required parameter 'image_uid' is set
        if ($image_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $image_uid when calling getImage');
        }
        // parse inputs
        $resourcePath = "/v0/sandbox/image/{imageUid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('*_/_*'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($raw_type !== null) {
            $queryParams['rawType'] = $this->apiClient->getSerializer()->toQueryValue($raw_type);
        }
        // query params
        if ($face !== null) {
            $queryParams['face'] = $this->apiClient->getSerializer()->toQueryValue($face);
        }
        // query params
        if ($light !== null) {
            $queryParams['light'] = $this->apiClient->getSerializer()->toQueryValue($light);
        }
        // path params
        if ($image_uid !== null) {
            $resourcePath = str_replace(
                "{" . "imageUid" . "}",
                $this->apiClient->getSerializer()->toPathValue($image_uid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/v0/sandbox/image/{imageUid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getImageList
     *
     * HTTP GET images list
     *
     * @return \com.ariadnext.idcheckio.model\ImageListResponse
     * @throws \com.ariadnext.idcheckio.invoker\ApiException on non-2xx response
     */
    public function getImageList()
    {
        list($response) = $this->getImageListWithHttpInfo();
        return $response;
    }

    /**
     * Operation getImageListWithHttpInfo
     *
     * HTTP GET images list
     *
     * @return Array of \com.ariadnext.idcheckio.model\ImageListResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \com.ariadnext.idcheckio.invoker\ApiException on non-2xx response
     */
    public function getImageListWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v0/sandbox/imagelist";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json; charset=utf-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\com.ariadnext.idcheckio.model\ImageListResponse',
                '/v0/sandbox/imagelist'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\com.ariadnext.idcheckio.model\ImageListResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ImageListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMrz
     *
     * HTTP GET mrz
     *
     * @param string $mrz_uid EnumDemoDocsMrz (required)
     * @return \com.ariadnext.idcheckio.model\MrzResponse
     * @throws \com.ariadnext.idcheckio.invoker\ApiException on non-2xx response
     */
    public function getMrz($mrz_uid)
    {
        list($response) = $this->getMrzWithHttpInfo($mrz_uid);
        return $response;
    }

    /**
     * Operation getMrzWithHttpInfo
     *
     * HTTP GET mrz
     *
     * @param string $mrz_uid EnumDemoDocsMrz (required)
     * @return Array of \com.ariadnext.idcheckio.model\MrzResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \com.ariadnext.idcheckio.invoker\ApiException on non-2xx response
     */
    public function getMrzWithHttpInfo($mrz_uid)
    {
        // verify the required parameter 'mrz_uid' is set
        if ($mrz_uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mrz_uid when calling getMrz');
        }
        // parse inputs
        $resourcePath = "/v0/sandbox/mrz/{mrzUid}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json; charset=utf-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($mrz_uid !== null) {
            $resourcePath = str_replace(
                "{" . "mrzUid" . "}",
                $this->apiClient->getSerializer()->toPathValue($mrz_uid),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\com.ariadnext.idcheckio.model\MrzResponse',
                '/v0/sandbox/mrz/{mrzUid}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\com.ariadnext.idcheckio.model\MrzResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\MrzResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMrzList
     *
     * HTTP GET mrz list
     *
     * @return \com.ariadnext.idcheckio.model\MrzListResponse
     * @throws \com.ariadnext.idcheckio.invoker\ApiException on non-2xx response
     */
    public function getMrzList()
    {
        list($response) = $this->getMrzListWithHttpInfo();
        return $response;
    }

    /**
     * Operation getMrzListWithHttpInfo
     *
     * HTTP GET mrz list
     *
     * @return Array of \com.ariadnext.idcheckio.model\MrzListResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \com.ariadnext.idcheckio.invoker\ApiException on non-2xx response
     */
    public function getMrzListWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v0/sandbox/mrzlist";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json; charset=utf-8'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\com.ariadnext.idcheckio.model\MrzListResponse',
                '/v0/sandbox/mrzlist'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\com.ariadnext.idcheckio.model\MrzListResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\MrzListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\com.ariadnext.idcheckio.model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
