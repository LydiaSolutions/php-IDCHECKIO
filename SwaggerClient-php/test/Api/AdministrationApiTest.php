<?php
/**
 * AdministrationApiTest
 * PHP version 5
 *
 * @category Class
 * @package  invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IdCheck.IO API
 *
 * Check identity documents
 *
 * OpenAPI spec version: 0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace invoker;

use invoker\Configuration;
use invoker\ApiClient;
use invoker\ApiException;
//use invoker\ObjectSerializer;
use api\AdministrationApi;

require_once(__DIR__ . '/vendor/autoload.php');

/**
 * AdministrationApiTest Class Doc Comment
 *
 * @category Class
 * @package  invoker
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdministrationApiTest extends \PHPUnit_Framework_TestCase
{
    private static $apiClient;
    private static $apiAdmin;
    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
        //print_r("setUp\n");
        $config = (new Configuration())->setHost('https://idcheckio.rennes.ariadnext.com:9443/rest')
                ->setSSLVerification(FALSE)
                ->setUserAgent("AXT Test")
                ->setPassword("exemple@")
                ->setUsername("ariadnext.exemple@ariadnext.com");
        global $apiClient;
        $apiClient = new ApiClient($config);
         
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for getHealth
     *
     * HTTP GET health.
     *
     */
    public function testGetHealth()
    {
        //print_r("getHealth\n");
        global $apiClient;
        
        $apiAdmin = (new AdministrationApi())->setApiClient($apiClient);
        try {
           $healthResponse = $apiAdmin->getHealth();
        } catch (ApiException $ex) {
            $this->fail($ex);
        }
        $this->assertSame('OK', $healthResponse->getStatus());
    }

    /**
     * Test case for getUser
     *
     * HTTP GET user.
     *
     */
    public function testGetUser()
    {
        //print_r("getUser\n");
        global $apiClient;
        
        $apiAdmin = (new AdministrationApi())->setApiClient($apiClient);
        try {
           $userResponse = $apiAdmin->getUser();
        } catch (ApiException $ex) {
            $this->fail($ex);
        }
        $this->assertInternalType("int", $userResponse->getRemainingCredits());
    }

}
